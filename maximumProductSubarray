"""
Dynamic Programming Algorithm: 

Sub-problem: f(i): maximum product that ends at and uses element i
Keep track of the current max and min of the subarray, We need to keep track of min since the min can turn into a max due to multiplying a negative with a negative. 

Base case: f(0) = 0

TC: O(n) SC: O(1) <- can use trackers instead of an array, resulting in constant space 

"""

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        n = len(nums)
        curMax = curMin = maxProd = minProd =  nums[0]
        for i in range(1,n):
            temp = curMax
            curMax = max(nums[i], curMax * nums[i], curMin * nums[i])
            curMin = min(nums[i], curMin * nums[i], temp * nums[i])
            maxProd = max(maxProd, curMax)
        return maxProd



        
